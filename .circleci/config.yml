version: 2.1

orbs:
  slack: circleci/slack@4.2.0

commands:
  notify-failure:
    description: Notify failure to Slack
    steps:
      - slack/notify:
          channel: C023EV1E6M8
          event: fail
          custom: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Failure* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  notify-success:
    description: Notify success to Slack
    steps:
      - slack/notify:
          channel: C023EV1E6M8
          event: pass
          custom: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Success* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy Backend Infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete S3 files
          when: on_fail
          command: aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Destroy Frontend Infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}

  export-backend-url:
    description: Export Backend API URL
    steps:
      - run:
          name: Export backend API URL
          command: |
            BACKEND_URL=$(curl -H "token: qzyg4s25zb4bnlk25sxe" --request GET https://api.memstash.io/values/backend_api)
            export default API_URL=http://$BACKEND_URL:3030
            echo "API_URL=$API_URL" >> frontend/.env

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            HAS_MIGRATION_RUN=$(curl -H "token: eb8a3f95-36a6-4953-a9ce-571f4deda6e6" --request GET https://api.memstash.io/values/migration_result)
            if $HAS_MIGRATION_RUN = "true"
              then
                cd /home/circleci/project/backend
                echo "Reverting migrations"
                npm run migrations:revert
              else
                echo "NO migration has ocurred"
                return 0
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/frontend && npm install
      - run:
          name: Build
          command: cd /home/circleci/project/frontend && npm run build:prod

  build-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/backend && npm install
      - run:
          name: Build
          command: cd /home/circleci/project/backend && npm run build
      - run:
          name: Copy compiled backend for future use in Ansible
          command: |
            mkdir /tmp/workspace
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend.tar.gz
            - package.json
      - notify-failure
      - notify-success

  test-frontend:
    docker:
      - image: circleci/node:12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/frontend && npm install
      - run:
          name: Run Frontend tests
          command: |
            cd /home/circleci/project/frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"

  test-backend:
    docker:
      - image: circleci/node:12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/backend && npm install
      - run:
          name: Test
          command: cd /home/circleci/project/backend && npm run test

  scan-frontend:
    docker:
      - image: circleci/node:12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/frontend && npm install
      - run:
          name: Audit NPM Dependencies
          command: cd /home/circleci/project/frontend && npm audit fix --audit-level=critical --force


  scan-backend:
    docker:
      - image: circleci/node:12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install NPM Dependencies
          command: cd /home/circleci/project/backend && npm install
      - run:
          name: Audit NPM Dependencies
          command: cd /home/circleci/project/backend && npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Deploy Backend Infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Save Backend URL
          when: on_success
          command: |
            BACKEND_API=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: qzyg4s25zb4bnlk25sxe" \
              --request PUT \
              --data $BACKEND_API \
              https://api.memstash.io/values/backend_api
      - run:
          name: Deploy Frontend Infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - f9:d6:b4:3b:87:9c:50:38:22:2f:28:29:78:10:a6:9c
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Install curl
          command: apk add curl
      - run:
          name: Configure backend server
          command: |
            echo $(curl -H "token: qzyg4s25zb4bnlk25sxe" --request GET https://api.memstash.io/values/backend_api) >> .circleci/ansible/inventory
            ansible-playbook -i .circleci/ansible/inventory .circleci/ansible/configure-server.yml


  run-migrations:
    docker:
      - image: circleci/node:12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Dependencies
          command: cd /home/circleci/project/backend && npm install
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: cd /home/circleci/project/backend && npm run migrations | tee migrations_results.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd /home/circleci/project/backend
            if grep "executed successfully" migrations_results.txt
            then
              curl -H "Content-Type: text/plain" -H "token: eb8a3f95-36a6-4953-a9ce-571f4deda6e6" --request PUT --data "true" https://api.memstash.io/values/migration_result
            else
              curl -H "Content-Type: text/plain" -H "token: eb8a3f95-36a6-4953-a9ce-571f4deda6e6" --request PUT --data "false" https://api.memstash.io/values/migration_result
            fi
      - revert-migrations
      - destroy-environment
      - notify-failure
      - notify-success

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --no-cache --upgrade bash
      - export-backend-url
      - run:
          name: Install NPM
          command: apk add --update npm
      - run:
          name: Install AWS-CLI
          command: |
            pip3 install awscli
      - run:
          name: Install Application NPM Dependencies
          command: cd frontend && npm install
      - run:
          name: Build Application
          command: cd frontend && npm run build
      - run:
          name: Copy files to S3
          command: |
            aws s3 cp frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - revert-migrations
      - destroy-environment


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - f9:d6:b4:3b:87:9c:50:38:22:2f:28:29:78:10:a6:9c
      # attach workspace
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install AWS CLI
          command: pip3 install awscli
      - run:
          name: Install ansible
          command: |
            # your code here
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Install curl
          command: apk add curl
      - run:
          name: Install Open SSH
          command: apk add openssh-client
      - run:
          name: Check folders
          command: |
            echo $(pwd)
            ls /root/project/backend
      - run:
          name: Configure backend server
          command: |
            echo $(curl -H "token: qzyg4s25zb4bnlk25sxe" --request GET https://api.memstash.io/values/backend_api) >> .circleci/ansible/inventory
            cd .circleci/ansible
            ansible-playbook -i inventory deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      ID: arns3
    steps:
      - checkout
      - run: apk --no-cache add curl
      - run:
          name: Install awscli
          command: |
            pip3 install awscli
            
      - run:
          name: smoke test frontend
          command: |
            URL="http://frontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
              then
                return 1
              else
                return 0
            fi
      - run:
          name: smoke test for backend.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            curl "http://${BACKEND_IP}:3030/api/status"
      # - revert-migrations
      # - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ea:7d:21:ef:24:86:2a:4f:0b:b1:c3:fa:3f:e9:2a:4d"
      - run:
          name: Update Cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo Old Workflow Id: "${OldWorkflowID}"
            if [ -n "${OldWorkflowID}" ]
            then
              echo "Updating existing CloudFront stack..."
              aws cloudformation update-stack \
                --template-body file://./.circleci/files/cloudfront.yml \
                --stack-name cloudfront-udapeople \
                --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}

              echo "Saving old workflow id..."
              curl -H "Content-Type: text/plain" -H "token: 55d1f101-ab86-42bb-8bea-ea171a873220" --request PUT --data "${OldWorkflowID}" https://api.memstash.io/values/old_workflow_id
            else
              echo "Creating new CloudFront sack..."
              aws cloudformation create-stack \
                --template-body file://./.circleci/files/cloudfront.yml \
                --stack-name cloudfront-udapeople \
                --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
            fi

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [build-frontend, build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]