version: 2.1

orbs:
  slack: circleci/slack@4.2.0

commands:
  notify-failure:
    description: Notify failure to Slack
    steps:
      - slack/notify:
          channel: C023EV1E6M8
          event: fail
          custom: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Failure* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  notify-success:
    description: Notify success to Slack
    steps:
      - slack/notify:
          channel: C023EV1E6M8
          event: pass
          custom: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Success* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete files from S3 bucket
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            # Delete frontend stack
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID}
            # Delete backend stack
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            MIGRATION_RESULT=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_result)
            if(( ${MIGRATION_RESULT} >= 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm install npm@latest -g
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            sudo npm install npm@latest -g
            sudo npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Frontend tests
          command: |
            cd frontend
            sudo npm install npm@latest -g
            npm run test
      - notify-failure
      - notify-success

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend tests
          command: |
            cd backend
            sudo npm install npm@latest -g
            npm run test
      - notify-failure
      - notify-success

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend dependencies
          command: |
            cd frontend
            sudo npm install
            sudo npm audit fix --force 
      - notify-failure
      - notify-success


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend dependencies
          command: |
            cd backend
            sudo npm install
            sudo nnpm audit fix --audit-level=critical --force
      - notify-failure
      - notify-success

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Store back-end IP using memstash.io
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            echo BACKEND EC2 IP ${INSTANCE_IP}
            curl -H "Content-Type: text/plain" -H "token: tghz1tr48dndyu0gk1xb" --request PUT --data ${INSTANCE_IP} https://api.memstash.io/values/instance_ip
      - run:
          name: Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["ed:e9:83:cf:43:79:b8:a7:92:3b:e6:66:18:06:61:83"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install ansible
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      
      - revert-migrations
      - destroy-environment # Rollback on failure

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            touch migration.txt
            echo "RUNNING MIGRATIONS"
            npm run migrations >> migrationOutput.txt
            cat migrationOutput.txt
          no_output_timeout: 15m
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            MIGRATION_RESULT=$(grep -c "has been executed successfully" migrationOutput.txt) || true
            echo Migration result: $MIGRATION_RESULT
            curl -H "Content-Type: text/plain" \
               -H "token: tghz1tr48dndyu0gk1xb" \
               --request PUT \
               --data ${MIGRATION_RESULT} \
               https://api.memstash.io/values/migration_result
      - run:
          name: LogOnFail
          when: on_fail
          command: |
            cat /home/circleci/.npm/_logs/*-debug.log
            ls -la
            cat backend/migration.txt
      - destroy-environment
      - notify-failure
      - notify-success

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --update npm
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: tghz1tr48dndyu0gk1xb" --request GET https://api.memstash.io/values/instance_ip)
            echo BACKEND INSTANCE IP FROM MEMSTASH $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo BACKEND API URL "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            ls -la
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      - revert-migrations
      - destroy-environment


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - f9:d6:b4:3b:87:9c:50:38:22:2f:28:29:78:10:a6:9c
      # attach workspace
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install AWS CLI
          command: pip3 install awscli
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip curl
            apk add --update openssh-client
      - run:
          name: Compress Backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            ls -la
      - run:
          name: Deploy Backend
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
      - run:
          name: Backend smoke test
          command: |
            BACKEND_IP=$(curl -H "token: Itghz1tr48dndyu0gk1xb" \
                        --request GET https://api.memstash.io/values/IP)
            URL="http://$BACKEND_IP:3030/api/status"
            echo $URL
            curl $URL
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # - revert-migrations
      # - destroy-environment

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [build-frontend, build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]